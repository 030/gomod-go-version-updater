---
name: gomod-go-version-updater-action
description: gomod-go-version-updater-action
inputs:
  github-token-for-downloading-private-go-modules:
    description: |
      Whether private go modules have to be downloaded.
  gomod-go-version-updater-action-log-level:
    description: |
      Change the default INFO log level to: DEBUG, WARNING, ERROR or CRITICAL.
  workflow_file:
    default: golang.yml
    description: |
      The description of the GitHub project.
    required: true
runs:
  using: 'composite'
  steps:
    - name: display the gh cli version
      run: gh --version
      shell: bash
    - uses: actions/checkout@v4.2.1
      with:
        ref: main
    # yamllint disable rule:line-length
    - name: set branch name
      run: |
        echo "GOMOD_GO_VERSION_UPDATER_LABEL=gomod-go-version-updater" >> $GITHUB_ENV
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH=update-go-version-in-go-mod-file" >> $GITHUB_ENV
      shell: bash
    - name: Create label
      run: |
        gh label create ${GOMOD_GO_VERSION_UPDATER_LABEL} --color "#F50BAB" --description "Pull requests that update Go version in the go.mod file" --force
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
    - name: update go version and push branch
      run: |
        git fetch -p -P
        git checkout -b ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}

        echo "github.ref_name: ${{ github.ref_name }}"

        export GOMOD_GO_VERSION_UPDATER_FILE=${GOMOD_GO_VERSION_UPDATER_LABEL}
        curl -L https://github.com/030/gomod-go-version-updater-action/releases/download/${{ github.ref_name }}/${GOMOD_GO_VERSION_UPDATER_FILE} \
          -o ${GOMOD_GO_VERSION_UPDATER_FILE}
        chmod +x ${GOMOD_GO_VERSION_UPDATER_FILE}

        if [ -n "${{ inputs.gomod-go-version-updater-action-log-level }}" ]; then
          export GOMOD_GO_VERSION_UPDATER_ACTION_LOGGING_LEVEL=${{ inputs.gomod-go-version-updater-action-log-level }}
          echo "GOMOD_GO_VERSION_UPDATER_ACTION_LOGGING_LEVEL: ${GOMOD_GO_VERSION_UPDATER_ACTION_LOGGING_LEVEL}"
        fi
        export GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT=$(./${GOMOD_GO_VERSION_UPDATER_FILE} 2>&1)
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT: ${GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT}"

        export GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT=$(echo ${GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT} |\
          grep "bump golang version" |\
          sed "s|.*\(bump.*\)|\1|")
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT: ${GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT}"

        export GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE="build(deps): ${GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT}"
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE: ${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}"

        if [ -n "$(git status --porcelain)" ]; then
          echo "There are uncommitted changes."
        else
          echo "No changes to commit."
          exit 0
        fi

        echo "git add..."
        git add go.mod

        echo "git config user..."
        git config user.name github-actions[bot]
        git config user.email \
          41898282+github-actions[bot]@users.noreply.github.com

        echo "git commit..."
        if ! git commit -m "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}"; then
          git commit --amend --no-edit
        fi

        echo "git push..."
        git push origin ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH} -f

        if gh pr list --json title | jq -e '.[] | select(.title | test("build\\(deps\\): bump golang version in go\\.mod file from .* to .*"))'; then
          echo "PR exists already. Updating the 'title' and 'description'..."
          gh pr edit ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH} \
            --body "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}" \
            --title "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}"
          exit 0
        fi

        echo "creating pr..."
        gh pr create \
          --base main \
          --body "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}" \
          --fill \
          --head "${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}" \
          --label dependencies \
          --label go \
          --label ${GOMOD_GO_VERSION_UPDATER_LABEL}
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
    # yamllint enable rule:line-length
    - uses: actions/setup-go@v5.0.2
      with:
        go-version-file: 'go.mod'
        cache: false
    # yamllint disable rule:line-length
    - run: |
        git config \
          --global url.https://${{ inputs.github-token-for-downloading-private-go-modules }}@github.com/.insteadOf https://github.com/
      shell: bash
      if: ${{ inputs.github-token-for-downloading-private-go-modules != '' }}
    # yamllint enable rule:line-length
    - name: go mod tidy
      run: |
        go mod tidy
      shell: bash
    - name: commit and force push if needed
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "There are uncommitted changes."
        else
          echo "No changes to commit."
          exit 0
        fi

        git add . -- ":!${GOMOD_GO_VERSION_UPDATER_LABEL}"
        git commit --amend --no-edit
        git push origin ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH} -f
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
